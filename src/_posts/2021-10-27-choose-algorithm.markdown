---
layout: post
title:  "Choose Algorithm"
date:   2021-10-27 18:17:40 +0200
categories: algorithm
---

## Introduction
In computer science, there are many algorithms that are used to solve problems, ranging from simple to complex ones. One such algorithm is the Choose Algorithm. It is a randomized algorithm that is used to select k random elements from an array with n elements. The algorithm is particularly useful in computer science applications such as randomized algorithms, simulations, and machine learning.

## Implementation

```ocaml

(* Choose Algorithm *)

let choose x k =
  let n = Array.length x in
  assert (n >= k);
  let y = Array.make k x.(0) in
  let i = ref 0 in
  let j = ref 0 in
  while !i < n && !j < k do
    let s = float_of_int (n - !i) in
    let l = int_of_float (s *. std_uniform_rvs ()) in
    if l < k - !j
    then (
      y.(!j) <- x.(!i);
      j := !j + 1);
    i := !i + 1
  done;
  y

```

The choose algorithm takes as input an array `x` of length `n` and an integer `k`. It then generates a new array `y` that contains `k` elements chosen randomly from `x`, without replacement. The algorithm achieves this by using a while loop that iterates over the indexes of the array `x`. At each iteration, the algorithm generates a random number and compares it to a threshold value to determine whether or not to add the corresponding value of `x` to the output array `y`. 

## Step-by-Step Explanation
1. The algorithm takes as input an array `x` and an integer `k`.
2. It initializes an array `y` of length `k` with the first element of `x`.
3. It initializes two pointers `i` and `j` to `0`.
4. The algorithm enters a while loop that executes `n` times or until `k` values have been selected.
5. At each iteration, the algorithm calculates a threshold value `l` to compare with a random floating-point number generated by the `std_uniform_rvs()` function.
6. If `l` is less than `k` minus the counter `j`, it adds the corresponding element of `x` to the output array `y` at position `j`, increments the counter `j` by 1 and continues to the next iteration. Otherwise, it increments the counter `i` and continues to the next iteration.
7. The array `y` containing the randomly selected `k` values is returned.

## Complexity Analysis
The time complexity of the algorithm consists mainly of the while loop that iterates over the array of length `n`. Within each iteration, the algorithm performs a constant amount of operations, including the calculation of the threshold and the comparison and selection of the values. Therefore, the time complexity of the algorithm is O(n). 

The space complexity of the algorithm is O(k), as it creates an output array of length `k`. However, the algorithm modifies the input array in place, so it uses only constant extra space.

In conclusion, the choose algorithm is a simple randomized algorithm with a time complexity of O(n) and a space complexity of O(k). It is useful in various applications, such as selecting random samples from a dataset or implementing randomized algorithms.